map $http_authorization $access_token {
    "~*^bearer (.*)$" $1;
    default $http_authorization;
}

proxy_cache_path /var/cache/nginx/tokens levels=1 keys_zone=token_responses:1m max_size=10m;

server {
    listen 80;                          # Use TLS in production
    root /usr/share/nginx/html/build;

    index index.html index.htm;

    set $oauth_token_endpoint       "https://<Hosted kong user IP>:8443/oauth2/authorize";
    set $oauth_response_type        "response_type";
    set $oauth_provision_key        "oauth2-nginx-proxy";
    set $oauth_authenticated_userid "dummy-consumer";
    set $oauth_client_id            "dummy-consumer-client-id"; 
    set $oauth_client_secret        "dummy-consumer-client-secret";
    set $redirect_uri               "https://dummy.com"; 

    location / {
        try_files $uri $uri/ /index.html;
    }

    location /api {
        # if ($http_user_agent !~* "(Mozilla|Opera|Chrome|Safari|Firefox)") {
        #     return 444;
        # }

        auth_request /_oauth2_token;
        proxy_set_header            Authorization "Bearer $access_token";
        proxy_set_header            X-Real-IP  $http_x_real_ip;
        proxy_set_header            Host  example.com;
        proxy_set_header            host  example.com;



        proxy_pass https://<Hosted kong user IP>:8443;
    }

    location = /_oauth2_token {
        internal;
        proxy_set_header            X-Real-IP  $remote_addr;
        proxy_set_header            host  $host;
        js_content                  oauth2.getAccessToken;
    }

    location = /_oauth2_send_token_request {
        internal;
        gunzip on;                                                      # Decompress if necessary

        proxy_method                POST;
        proxy_set_header            Content-Type "application/x-www-form-urlencoded";
        proxy_set_body              "client_id=$oauth_client_id&response_type=token&provision_key=$oauth_provision_key&authenticated_userid=$oauth_authenticated_userid&redirect_uri=$redirect_uri";
        proxy_pass                  $oauth_token_endpoint;
        proxy_set_header            X-Real-IP  $http_x_real_ip;
        proxy_set_header            Host  $http_x_real_ip;
        proxy_set_header            host  $http_x_real_ip;

        proxy_cache                 token_responses;                    # Enable caching of token introspection responses
        proxy_cache_key             $redirect_uri;                      # Cache the response for each unique access token
        proxy_cache_lock            on;                                 # Don't allow simultaneous requests for same token
        proxy_cache_valid           200 10s;                            # How long to use cached introspection responses
        proxy_cache_use_stale       error timeout;                      # Use old responses if we cannot reach the server
        proxy_ignore_headers        Cache-Control Expires Set-Cookie;   # Cache even when receiving these
    }
}
